plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.0'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.market'
version = '0.0.1-SNAPSHOT'
description = 'Demo project for Spring Boot'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// 시간 데이터포맷
	implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.10'

	// 비밀번호 암호화 passwordEncoder
	implementation 'org.springframework.security:spring-security-crypto'

	// JWT 라이브러리 (Auth0)
	implementation 'com.auth0:java-jwt:4.4.0'

    // 이메일 전송 기능
    implementation 'org.springframework.boot:spring-boot-starter-mail'

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'

    // 스웨거
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

	// 웹소켓
	implementation 'org.springframework.boot:spring-boot-starter-websocket'

	// AppConfig에서 필요한 의존성
	implementation 'org.apache.httpcomponents.client5:httpclient5'

	// 토스 결제 통신시 필요한 도구
	implementation group: 'net.minidev', name: 'json-smart', version: '2.5.2'

	// WebClient 의존성
	implementation 'org.springframework.boot:spring-boot-starter-webflux'

	// querydsl 의존성
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'


}
// Querydsl 설정
def generated = 'src/main/generated'

sourceSets {
	main {
		java {
			srcDirs += [ generated ]
		}
	}
}

tasks.withType(JavaCompile) {
	options.generatedSourceOutputDirectory = file(generated)
}

clean.doLast {
	file(generated).deleteDir()
}

tasks.named('test') {
	useJUnitPlatform()
}
